// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/service.proto

package hocon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HoconServiceClient is the client API for HoconService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HoconServiceClient interface {
	// управление лампочкой
	LampControl(ctx context.Context, in *LampStatus, opts ...grpc.CallOption) (*LampStatus, error)
}

type hoconServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHoconServiceClient(cc grpc.ClientConnInterface) HoconServiceClient {
	return &hoconServiceClient{cc}
}

func (c *hoconServiceClient) LampControl(ctx context.Context, in *LampStatus, opts ...grpc.CallOption) (*LampStatus, error) {
	out := new(LampStatus)
	err := c.cc.Invoke(ctx, "/api.hocon.v1.HoconService/LampControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HoconServiceServer is the server API for HoconService service.
// All implementations must embed UnimplementedHoconServiceServer
// for forward compatibility
type HoconServiceServer interface {
	// управление лампочкой
	LampControl(context.Context, *LampStatus) (*LampStatus, error)
	mustEmbedUnimplementedHoconServiceServer()
}

// UnimplementedHoconServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHoconServiceServer struct {
}

func (UnimplementedHoconServiceServer) LampControl(context.Context, *LampStatus) (*LampStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LampControl not implemented")
}
func (UnimplementedHoconServiceServer) mustEmbedUnimplementedHoconServiceServer() {}

// UnsafeHoconServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HoconServiceServer will
// result in compilation errors.
type UnsafeHoconServiceServer interface {
	mustEmbedUnimplementedHoconServiceServer()
}

func RegisterHoconServiceServer(s grpc.ServiceRegistrar, srv HoconServiceServer) {
	s.RegisterService(&HoconService_ServiceDesc, srv)
}

func _HoconService_LampControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LampStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoconServiceServer).LampControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.hocon.v1.HoconService/LampControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoconServiceServer).LampControl(ctx, req.(*LampStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// HoconService_ServiceDesc is the grpc.ServiceDesc for HoconService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HoconService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.hocon.v1.HoconService",
	HandlerType: (*HoconServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LampControl",
			Handler:    _HoconService_LampControl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
